package tg

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"
)

func (bot *Bot) handleStart(c telebot.Context) error {
	return c.Send("–ü—Ä–∏–≤–µ—Ç üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞ –∏ –ø–æ–∫—É–ø–∫–∏.\n\n" +
		"–ö–æ–º–∞–Ω–¥—ã:\n/menu ‚Äì –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞\n/cart ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n/clear ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
}

func (bot *Bot) handleMenu(c telebot.Context) error {
	foods, err := bot.svc.ListFoods(context.Background())
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥")
	}

	if len(foods) == 0 {
		return c.Send("–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üôà")
	}

	var rows [][]telebot.InlineButton
	for _, f := range foods {
		addBtn := telebot.InlineButton{
			Unique: "add_food",
			Text:   fmt.Sprintf("‚ûï %s", f.Name),
			Data:   fmt.Sprintf("%d", f.ID),
		}
		remBtn := telebot.InlineButton{
			Unique: "remove_food",
			Text:   fmt.Sprintf("‚ûñ %s", f.Name),
			Data:   fmt.Sprintf("%d", f.ID),
		}
		compBtn := telebot.InlineButton{
			Unique: "food_compose",
			Text:   "‚ÑπÔ∏è —Å–æ—Å—Ç–∞–≤",
			Data:   fmt.Sprintf("%d", f.ID),
    	}
		rows = append(rows, []telebot.InlineButton{addBtn, remBtn, compBtn})
	}

	return c.Send("–í—ã–±–µ—Ä–∏ –±–ª—é–¥–∞:", &telebot.ReplyMarkup{InlineKeyboard: rows})
}

func (bot *Bot) handleCart(c telebot.Context) error {
	items, _ := bot.svc.BuildCart(context.Background())
	if len(items) == 0 {
		return c.Send("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí")
	}

	var msg strings.Builder
	msg.WriteString("üõí –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞:\n\n")
	for _, it := range items {
		check := "‚¨ú"
		if it.Checked {
			check = "‚úÖ"
		}
		msg.WriteString(fmt.Sprintf("%s %s ‚Äî %.2f %s (%s)\n",
			check, it.Name, it.Qty, it.Unit, it.Department))
	}
	return c.Send(msg.String())
}

func (bot *Bot) handleClear(c telebot.Context) error {
	if err := bot.svc.Clear(context.Background()); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
	}
	return c.Send("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üßπ")
}

func (bot *Bot) handleAddFood(c telebot.Context) error {
	foodID, _ := strconv.ParseInt(c.Data(), 10, 64)
	if err := bot.svc.AddFood(context.Background(), foodID); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"})
	}
	return c.Respond(&telebot.CallbackResponse{Text: "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ"})
}

func (bot *Bot) handleRemoveFood(c telebot.Context) error {
	foodID, err := strconv.ParseInt(c.Data(), 10, 64)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π ID"})
	}

	if err := bot.svc.RemoveFood(context.Background(), foodID); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"})
	}

	return c.Respond(&telebot.CallbackResponse{Text: "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ üóë"})
}


func (bot *Bot) handleFoodCompose(c telebot.Context) error {
    foodID, err := strconv.ParseInt(c.Data(), 10, 64)
    if err != nil {
        return c.Respond(&telebot.CallbackResponse{Text: "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π ID"})
    }

    food, items, err := bot.svc.GetComposition(context.Background(), foodID)
    if err != nil {
        return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤"})
    }
    if len(items) == 0 {
        return c.Send("–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    }

    var sb strings.Builder
    if food != nil {
        sb.WriteString(fmt.Sprintf("üìñ –°–æ—Å—Ç–∞–≤ *%s*:\n", food.Name))
    } else {
        sb.WriteString("üìñ –°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞:\n")
    }
    // items: []domain.CompositionItem
    for _, it := range items {
        sb.WriteString(fmt.Sprintf("- %s: %.2f %s", it.Ingredient.Name, it.Quantity, it.Unit))
        if dep := it.Ingredient.Department; dep != "" {
            sb.WriteString(fmt.Sprintf("  _(–æ—Ç–¥–µ–ª: %s)_", dep))
        }
        sb.WriteString("\n")
    }

    return c.Send(sb.String(), &telebot.SendOptions{ParseMode: "Markdown"})
}

