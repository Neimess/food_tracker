package tg

import (
	"context"
	"encoding/json"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"
)

func (bot *Bot) handleAddFood(c telebot.Context) error {
	var payload DefPayload
	if err := json.Unmarshal([]byte(c.Data()), &payload); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}
	if err := bot.svc.AddFood(context.Background(), payload.ID); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"})
	}
	_ = c.Respond(&telebot.CallbackResponse{Text: "–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ"})
	return bot.editMenu(c)
}

func (bot *Bot) handleRemoveFood(c telebot.Context) error {
	id, err := strconv.ParseInt(c.Data(), 10, 64)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
	}
	if err := bot.svc.RemoveFood(context.Background(), id); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ"})
	}
	_ = c.Respond(&telebot.CallbackResponse{Text: "–£–±—Ä–∞–Ω–æ üóë"})
	return bot.editMenu(c)
}

func (bot *Bot) handleFoodCompose(c telebot.Context) error {
	foodID, err := strconv.ParseInt(c.Data(), 10, 64)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π ID"})
	}

	food, items, err := bot.svc.GetComposition(context.Background(), foodID)
	if err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤"})
	}
	if len(items) == 0 {
		return c.Respond(&telebot.CallbackResponse{Text: "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç", ShowAlert: true})
	}

	var sb strings.Builder
	if food != nil {
		sb.WriteString("üìñ –°–æ—Å—Ç–∞–≤ " + food.Name + ":\n")
	} else {
		sb.WriteString("üìñ –°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞:\n")
	}
	for _, it := range items {
		sb.WriteString("- " + it.Ingredient.Name)
		if it.Quantity > 0 || it.Unit != "" {
			sb.WriteString(": ")
			if it.Quantity > 0 {
				sb.WriteString(strconv.Itoa(int(it.Quantity)))
			}
			if it.Unit != "" {
				sb.WriteString(" " + it.Unit)
			}
		}
		sb.WriteString("\n")
	}
	text := sb.String()

	if err := c.Respond(&telebot.CallbackResponse{Text: text, ShowAlert: true}); err == nil {
		return nil
	}
	return c.Send("üìñ " + text)
}

func (bot *Bot) handleToggle(c telebot.Context) error {
	var payload TogglePayload
	if err := json.Unmarshal([]byte(c.Data()), &payload); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	if err := bot.svc.ToggleChecked(context.Background(), payload.IngredientID); err != nil {
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞: " + err.Error()})
	}

	return bot.renderDepartment(
		c,
		payload.Index,
		true,
	)
}
